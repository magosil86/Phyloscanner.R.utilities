args <- commandArgs()
if(!any(args=='--args'))
	args<- vector("numeric",0)
if(any(args=='--args'))
	args<- args[-(1:match("--args", args)) ]
#	default args
indir					<- NA
outdir					<- NA
select					<- ''
references.pattern		<- 'REF'
run.pattern				<- 'ptyr'
plot.max.clade			<- 0

if(exists("args"))
{	
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,6),
								indir= return(substr(arg,8,nchar(arg))),NA)	}))
	if(length(tmp)>0) indir<- tmp[1]	
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,7),
								outdir= return(substr(arg,9,nchar(arg))),NA)	}))
	if(length(tmp)>0) outdir<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,7),
								select= return(substr(arg,9,nchar(arg))),NA)	}))
	if(length(tmp)>0) select<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,15),
								plot.max.clade= return(as.numeric(substr(arg,17,nchar(arg)))),NA)	}))
	if(length(tmp)>0) plot.max.clade<- tmp[1]		
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,19),
								references.pattern= return(substr(arg,21,nchar(arg))),NA)	}))
	if(length(tmp)>0) references.pattern<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,12),
								run.pattern= return(substr(arg,14,nchar(arg))),NA)	}))
	if(length(tmp)>0) run.pattern<- tmp[1]			
}
if( is.na(indir) )
{
	cat('\nusage: Rscript phyloscan.scan.superinfections.Rscript -indir=INDIR
\t\t\t[-outdir=OUTDIR] [-select=SELECT] [-references.pattern=REFPATTERN]
\t\t\t[-run.pattern=RUNPATTERN] [-plot.max.clade=PMAXCLADE]
\nThis R script scans short read trees for phylogenetic evidence of super-infections. 
\t\t\tShort read trees must have been pre-processed with "phyloscan.evaluate.examl.Rscript"
\t\t\tand stored in an R object file ending in "_examl.rda". The script reads these files from
\t\t\tdirectory INDIR and calculates several tree statistics. Tree statistics are stored in
\t\t\tcorresponding R object files ending in "_examl_stat.rda", as well as several ".csv" files. 
\t\t\tIf PMAXCLADE is set to a value >1, scan statistics for each individual are plotted to a 
\t\t\tcorresponding pdf file.
\nR users can use the functions "pty.stat.superinfections.XXX" and "pty.stat.superinfections.XXX.plot" directly.    
\narguments:\n
\t-indir=INDIR: Input directory with pre-processed short read trees in files ending with "_examl.rda".
\noptional arguments:\n
\t-outdir=OUTDIR: Output directory. By default set to INDIR.
\t-references.pattern=REFPATTERN: Regular expression that identifies all reference 
\t\t\tsequences. By default "REF".
\t-run.pattern=RUNPATTERN: String that identifies files of separate phylotype runs. 
\t\t\tThe string must be followed by a number. Output is produced for each run separately.
\t\t\tThis option is useful to group output as desired. Without the SELECT option, all 
\t\t\tgroups will be processed sequentially. By default ""; could e.g. be "^ptyr" to 
\t\t\tgroup newick files starting with "ptyr1_" and "ptyr2_" into two separate runs 
\t\t\t"1" and "2".
\t-select=SELECT: Regular expression that selects a subset of newick files in the 
\t\t\tinput directory. This is useful to avoid very large file sizes and memory consumption 
\t\t\tof this Rscript. Also useful to parallelize this processing step. By default ""; 
\t\t\tcould e.g. be "^ptyr22_".
\t-plot.max.clade=PMAXCLADE: Plot scan statistics for the largest PMAXCLADE monophyletic 
\t\t\tclades of every individual in each window. By default 0.
')
	quit('no')
}
if( is.na(outdir) )
	outdir	<- indir
if(1)
{ 
	print(indir) 
	print(outdir) 
	print(select) 
	print(references.pattern)
	print(run.pattern)
	print(plot.max.clade)
}
###############################################################################
#	run script
library(phyloscan)

infiles		<- data.table(FILE=list.files(indir, pattern='examl.rda$'))
if(nchar(run.pattern))
	infiles[, PTY_RUN:= as.numeric(gsub(run.pattern,'',sapply(strsplit(FILE,'_'),'[[',1)))]
if(!nchar(run.pattern))
	infiles[, PTY_RUN:= 1L]
setkey(infiles, PTY_RUN)
infiles		<- subset(infiles, grepl(select, FILE))

for(i in seq_len(nrow(infiles)))		
{
		cat('\nprocess',infiles[i,FILE])
		file		<- file.path(indir,infiles[i,FILE])
		load( file )	#loads "pty.ph"   "ptyfiles"		
		#pty.stat	<- pty.stat.all.160128(pty.ph, ptyfiles)
		tmp			<- pty.stat.superinfections.160208(pty.ph, ptyfiles, references.pattern=references.pattern)
		stat.ind	<- tmp$stat.ind
		stat.clades	<- tmp$stat.clades
		#	save to file
		file		<- file.path(outdir, basename(gsub('examl\\.rda','examl_stat\\.rda',file)))
		cat('\nsave to file',file)
		save(stat.ind, stat.clades, pty.ph, ptyfiles, file=file)		
		cat('\nwrite "stat.ind" to file',gsub('\\.rda','_ind.csv',file))
		write.csv( subset(stat.ind, select=setdiff(colnames(stat.ind),'FILE')), row.names=FALSE, file=gsub('\\.rda','_ind.csv',file) )
		cat('\nwrite "stat.clades" to file',gsub('\\.rda','_clades.csv',file))
		write.csv( subset(stat.clades, select=setdiff(colnames(stat.clades),'FILE')), row.names=FALSE, file=gsub('\\.rda','_clades.csv',file) )
		#	plot to file
		if(!is.na(plot.max.clade) & plot.max.clade>0)
		{
			file		<- gsub('\\.rda','\\.pdf',file)
			cat('\nplot to file',file)
			pty.stat.superinfections.160208.plot(stat.clades, stat.ind, file, plot.max.clade=plot.max.clade)	
		}		
		gc()
}

